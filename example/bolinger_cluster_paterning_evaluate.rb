dir = File.dirname(File.expand_path(__FILE__))
dir = File.dirname(File.expand_path(__FILE__))
require "#{dir}/../lib/stock"

learning = 2000
to       = Date.latest
from     = to.prev(learning)
codes    = [2461, 8035, 7751, 6370, 1821, 5802, 8957, 3382, 6502, 4922, 5411, 6645, 6841, 6976, 2413, 6305, 9832, 6753, 2432, 7272, 9984, 4062, 6952, 9021, 1343, 6954, 6935, 2497, 8586, 7832, 6701, 6758, 3234, 3087, 9531, 9509, 8595, 2706, 6624, 2489, 8001, 8411, 3086, 8905, 3116, 9684, 4902, 4666, 9962, 3264, 5713, 6794, 2809, 7013, 2351, 9613, 6786, 3598, 7518, 3231, 8801, 9719, 7278, 6754, 9041, 8002, 1808, 7205, 9202, 7313, 6923, 9501, 3405, 7012, 2121, 8985, 4921, 8572, 3843, 6752, 4901, 7201, 9064, 4502, 8308, 2810, 7267, 6349, 8960, 8894, 6141, 7274, 6460, 6727, 2593, 2002, 8725, 8616, 9104, 8604, 6506, 1926, 7599, 4185, 8789, 7974, 6503, 6770, 6724, 6448, 8802, 6971, 7262, 3436, 8219, 9735, 1878, 1893, 9759, 8202, 9508, 6632, 5110, 8570, 3092, 4452, 6326, 3758, 6495, 7202, 7203, 6494, 7269, 7270, 5401, 4324, 6301, 2730, 6143, 1911, 9603, 4543, 4676, 4755, 5970, 8848, 9503, 2897, 4506, 8309, 4206, 5423, 1605, 9513, 6702, 8795, 8473, 7741, 4680, 7600, 8953, 9506, 9432, 6762, 3064, 6816, 2702, 7936, 4519, 9022, 3048, 6479, 8729, 9792, 7844, 2331, 4321, 6269, 4347, 5333, 5938, 7915, 8462, 9507, 6501, 7731, 6857, 6135, 4751, 1321, 4507, 1801, 8242, 6594, 6981, 1306, 5901, 2802, 6113, 2445, 4568, 9107, 2503, 8698, 9831, 4503, 3877, 7616, 8113, 1928, 1929, 1925, 2371, 5108, 8031, 5334, 8963, 9983, 2502, 9086, 8954, 6902, 7483, 9861, 7312, 7211, 4971, 3402, 1332, 2206, 7752, 2607, 8591, 6634, 8986, 3765, 6988, 6103, 3099, 2768, 2929, 7581, 9020, 4188, 4777, 7296, 8601, 8267, 6473, 8129, 5105, 6967, 9132, 9504, 9532, 4202, 8766, 4661, 4911, 8136, 2124, 3003, 2175, 4523, 9433, 2811, 4689, 8058, 9424, 5929, 3397, 8053, 8897, 9437, 6367]
cluster_size = {2461 => 18, 8035 => 18, 7751 => 17, 6370 => 19, 1821 => 17, 5802 => 19, 8957 => 18, 3382 => 18, 6502 => 18, 4922 => 19, 5411 => 19, 6645 => 20, 6841 => 19, 6976 => 16, 2413 => 19, 6305 => 14, 9832 => 17, 6753 => 13, 2432 => 20, 7272 => 19, 9984 => 19, 4062 => 20, 6952 => 20, 9021 => 19, 1343 => 19, 6954 => 14, 6935 => 18, 2497 => 19, 8586 => 17, 7832 => 18, 6701 => 17, 6758 => 20, 3234 => 16, 3087 => 17, 9531 => 18, 9509 => 12, 8595 => 20, 2706 => 18, 6624 => 20, 2489 => 15, 8001 => 18, 8411 => 15, 3086 => 17, 8905 => 17, 3116 => 19, 9684 => 17, 4902 => 20, 4666 => 19, 9962 => 20, 3264 => 14, 5713 => 19, 6794 => 20, 2809 => 18, 7013 => 18, 2351 => 20, 9613 => 14, 6786 => 17, 3598 => 19, 7518 => 19, 3231 => 20, 8801 => 20, 9719 => 19, 7278 => 20, 6754 => 18, 9041 => 20, 8002 => 19, 1808 => 17, 7205 => 18, 9202 => 19, 7313 => 18, 6923 => 20, 9501 => 20, 3405 => 19, 7012 => 19, 2121 => 17, 8985 => 20, 4921 => 20, 8572 => 19, 3843 => 20, 6752 => 19, 4901 => 20, 7201 => 19, 9064 => 19, 4502 => 14, 8308 => 20, 2810 => 19, 7267 => 19, 6349 => 19, 8960 => 20, 8894 => 20, 6141 => 18, 7274 => 18, 6460 => 17, 6727 => 20, 2593 => 20, 2002 => 17, 8725 => 19, 8616 => 20, 9104 => 20, 8604 => 20, 6506 => 20, 1926 => 20, 7599 => 18, 4185 => 20, 8789 => 19, 7974 => 18, 6503 => 20, 6770 => 20, 6724 => 15, 6448 => 16, 8802 => 16, 6971 => 20, 7262 => 19, 3436 => 15, 8219 => 20, 9735 => 18, 1878 => 19, 1893 => 20, 9759 => 20, 8202 => 19, 9508 => 19, 6632 => 14, 5110 => 20, 8570 => 19, 3092 => 20, 4452 => 19, 6326 => 18, 3758 => 16, 6495 => 19, 7202 => 16, 7203 => 20, 6494 => 13, 7269 => 18, 7270 => 20, 5401 => 20, 4324 => 19, 6301 => 19, 2730 => 18, 6143 => 17, 1911 => 20, 9603 => 19, 4543 => 20, 4676 => 16, 4755 => 19, 5970 => 19, 8848 => 19, 9503 => 17, 2897 => 16, 4506 => 15, 8309 => 19, 4206 => 20, 5423 => 19, 1605 => 17, 9513 => 18, 6702 => 20, 8795 => 19, 8473 => 18, 7741 => 20, 4680 => 19, 7600 => 18, 8953 => 20, 9506 => 18, 9432 => 14, 6762 => 16, 3064 => 19, 6816 => 19, 2702 => 18, 7936 => 20, 4519 => 13, 9022 => 18, 3048 => 17, 6479 => 19, 8729 => 18, 9792 => 20, 7844 => 17, 2331 => 18, 4321 => 20, 6269 => 20, 4347 => 20, 5333 => 20, 5938 => 20, 7915 => 17, 8462 => 18, 9507 => 19, 6501 => 19, 7731 => 19, 6857 => 19, 6135 => 15, 4751 => 16, 1321 => 20, 4507 => 20, 1801 => 18, 8242 => 19, 6594 => 20, 6981 => 19, 1306 => 19, 5901 => 20, 2802 => 19, 6113 => 19, 2445 => 19, 4568 => 16, 9107 => 19, 2503 => 18, 8698 => 20, 9831 => 15, 4503 => 14, 3877 => 14, 7616 => 20, 8113 => 19, 1928 => 20, 1929 => 17, 1925 => 20, 2371 => 18, 5108 => 19, 8031 => 19, 5334 => 15, 8963 => 19, 9983 => 19, 2502 => 19, 9086 => 19, 8954 => 14, 6902 => 19, 7483 => 19, 9861 => 16, 7312 => 20, 7211 => 16, 4971 => 20, 3402 => 20, 1332 => 16, 2206 => 19, 7752 => 14, 2607 => 17, 8591 => 16, 6634 => 19, 8986 => 18, 3765 => 19, 6988 => 19, 6103 => 18, 3099 => 20, 2768 => 20, 2929 => 19, 7581 => 20, 9020 => 17, 4188 => 16, 4777 => 20, 7296 => 20, 8601 => 19, 8267 => 18, 6473 => 20, 8129 => 18, 5105 => 16, 6967 => 19, 9132 => 17, 9504 => 19, 9532 => 16, 4202 => 19, 8766 => 18, 4661 => 19, 4911 => 19, 8136 => 20, 2124 => 19, 3003 => 19, 2175 => 18, 4523 => 20, 9433 => 19, 2811 => 19, 4689 => 19, 8058 => 20, 9424 => 19, 5929 => 20, 3397 => 18, 8053 => 18, 8897 => 18, 9437 => 17, 6367 => 20}
log_size     = {2461 => 14, 8035 => 37, 7751 => 10, 6370 => 45, 1821 => 46, 5802 => 39, 8957 => 47, 3382 => 40, 6502 => 32, 4922 => 49, 5411 => 2, 6645 => 26, 6841 => 4, 6976 => 26, 2413 => 38, 6305 => 11, 9832 => 12, 6753 => 39, 2432 => 19, 7272 => 32, 9984 => 5, 4062 => 9, 6952 => 40, 9021 => 1, 1343 => 10, 6954 => 31, 6935 => 50, 2497 => 2, 8586 => 37, 7832 => 43, 6701 => 50, 6758 => 36, 3234 => 38, 3087 => 45, 9531 => 37, 9509 => 49, 8595 => 43, 2706 => 46, 6624 => 6, 2489 => 39, 8001 => 50, 8411 => 36, 3086 => 47, 8905 => 33, 3116 => 26, 9684 => 47, 4902 => 46, 4666 => 46, 9962 => 7, 3264 => 22, 5713 => 39, 6794 => 13, 2809 => 50, 7013 => 46, 2351 => 33, 9613 => 44, 6786 => 34, 3598 => 39, 7518 => 13, 3231 => 26, 8801 => 50, 9719 => 38, 7278 => 42, 6754 => 10, 9041 => 14, 8002 => 50, 1808 => 48, 7205 => 42, 9202 => 18, 7313 => 14, 6923 => 46, 9501 => 1, 3405 => 39, 7012 => 50, 2121 => 39, 8985 => 49, 4921 => 31, 8572 => 49, 3843 => 50, 6752 => 49, 4901 => 2, 7201 => 34, 9064 => 50, 4502 => 17, 8308 => 19, 2810 => 1, 7267 => 42, 6349 => 4, 8960 => 42, 8894 => 36, 6141 => 47, 7274 => 45, 6460 => 47, 6727 => 6, 2593 => 49, 2002 => 49, 8725 => 6, 8616 => 38, 9104 => 39, 8604 => 24, 6506 => 50, 1926 => 44, 7599 => 31, 4185 => 16, 8789 => 45, 7974 => 46, 6503 => 37, 6770 => 33, 6724 => 40, 6448 => 41, 8802 => 48, 6971 => 48, 7262 => 32, 3436 => 37, 8219 => 12, 9735 => 4, 1878 => 50, 1893 => 48, 9759 => 38, 8202 => 44, 9508 => 3, 6632 => 26, 5110 => 2, 8570 => 43, 3092 => 18, 4452 => 27, 6326 => 5, 3758 => 6, 6495 => 27, 7202 => 47, 7203 => 20, 6494 => 20, 7269 => 47, 7270 => 25, 5401 => 45, 4324 => 40, 6301 => 6, 2730 => 47, 6143 => 45, 1911 => 31, 9603 => 2, 4543 => 7, 4676 => 45, 4755 => 38, 5970 => 48, 8848 => 43, 9503 => 37, 2897 => 27, 4506 => 49, 8309 => 50, 4206 => 27, 5423 => 48, 1605 => 50, 9513 => 50, 6702 => 45, 8795 => 49, 8473 => 3, 7741 => 4, 4680 => 46, 7600 => 3, 8953 => 50, 9506 => 3, 9432 => 46, 6762 => 47, 3064 => 26, 6816 => 20, 2702 => 1, 7936 => 45, 4519 => 38, 9022 => 13, 3048 => 6, 6479 => 18, 8729 => 8, 9792 => 36, 7844 => 8, 2331 => 7, 4321 => 40, 6269 => 28, 4347 => 37, 5333 => 46, 5938 => 49, 7915 => 50, 8462 => 48, 9507 => 41, 6501 => 36, 7731 => 30, 6857 => 39, 6135 => 44, 4751 => 42, 1321 => 50, 4507 => 44, 1801 => 39, 8242 => 47, 6594 => 43, 6981 => 49, 1306 => 47, 5901 => 21, 2802 => 19, 6113 => 13, 2445 => 11, 4568 => 31, 9107 => 37, 2503 => 32, 8698 => 50, 9831 => 48, 4503 => 6, 3877 => 37, 7616 => 27, 8113 => 8, 1928 => 24, 1929 => 39, 1925 => 7, 2371 => 13, 5108 => 18, 8031 => 50, 5334 => 39, 8963 => 5, 9983 => 48, 2502 => 14, 9086 => 37, 8954 => 49, 6902 => 45, 7483 => 2, 9861 => 31, 7312 => 41, 7211 => 23, 4971 => 38, 3402 => 41, 1332 => 47, 2206 => 45, 7752 => 40, 2607 => 49, 8591 => 17, 6634 => 12, 8986 => 26, 3765 => 44, 6988 => 43, 6103 => 47, 3099 => 8, 2768 => 30, 2929 => 40, 7581 => 47, 9020 => 31, 4188 => 44, 4777 => 33, 7296 => 23, 8601 => 47, 8267 => 45, 6473 => 44, 8129 => 46, 5105 => 2, 6967 => 36, 9132 => 35, 9504 => 31, 9532 => 49, 4202 => 8, 8766 => 31, 4661 => 47, 4911 => 38, 8136 => 4, 2124 => 44, 3003 => 19, 2175 => 33, 4523 => 4, 9433 => 50, 2811 => 45, 4689 => 2, 8058 => 29, 9424 => 45, 5929 => 41, 3397 => 39, 8053 => 42, 8897 => 36, 9437 => 37, 6367 => 5}

log          = Log.new('bolinger_cluster_paterning/eval')
bol_length   = (10..100)

def synchronize
  while true
    File.open('elock', 'w') do |file|
      return yield if file.flock(File::LOCK_EX|File::LOCK_NB)
    end
  end
end

codes.each {|code| log.puts code} 
Parallel.each(codes) do |code|
  begin
    closes = synchronize do 
      Daily.adjusteds(from ,to, code: code)
    end

    bols  = []
    (100...closes.length).each do |i|
      item = []
      bol_length.each do |l|
        item << closes[i-l..i].bol(l).last.value
      end
      bols  << item
    end

    logs    = closes.log(log_size[code])
    cs      = cluster_size[code]
    cluster = Cluster::KMeans.new(bols, cs)
    cluster.clusterize

    returns = {}
    bols.each_with_index do |bol, i|
      center = cluster.clusters.find do |c|
        c.enclose?(bol)
      end.center
      next if not logs[i+log_size[code]]
      returns[center] ||= []
      returns[center] << logs[i+log_size[code]].value
    end

    sum = {}
    returns.each do |center, returns|
      sum[center] ||= 0
      sum[center] += returns.inject(0) {|r, log| r += log}
    end

    rate = {}
    returns.each do |center, returns|
      returns.each do |value|
        next if not value > 0
        rate[center] ||= 0
        rate[center] += 1
      end
    end
    rate.each do |center, count|
      rate[center] = count.to_f / returns[center].length
    end

    ave = {}
    sum.each do |center, s|
      ave[center] = s.to_f / returns[center].length
    end

    dev = {}
    returns.each do |center, r|
      dev[center] ||= 0
      r.each do |value|
        dev[center] += (value - ave[center])**2
      end
    end
    dev.each do |center, d|
      dev[center] = Math.sqrt(d / returns[center].length)
    end

    synchronize do
      log.puts "#{code}\taverage\tdeviation\tcount\twin_rate"
      ave.each do |center, a|
        puts "\t#{a}\t#{dev[center]}\t#{returns[center].length}\t#{rate[center]}"
      end
    end

  rescue => ex
    log.puts ex.message
    log.puts ex.backtrace.to_s
  end
end
